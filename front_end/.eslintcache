[{"F:\\haitao\\front_end\\src\\index.js":"1","F:\\haitao\\front_end\\src\\App.js":"2","F:\\haitao\\front_end\\src\\reportWebVitals.js":"3","F:\\haitao\\front_end\\src\\user\\login.js":"4","F:\\haitao\\front_end\\src\\user\\regster.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":743,"mtime":1608440276820,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":2367,"mtime":1608440917821,"results":"10","hashOfConfig":"7"},{"size":8455,"mtime":1608440917831,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"4zfo8u",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"F:\\haitao\\front_end\\src\\index.js",[],["24","25"],"F:\\haitao\\front_end\\src\\App.js",["26","27"],"F:\\haitao\\front_end\\src\\reportWebVitals.js",[],"F:\\haitao\\front_end\\src\\user\\login.js",["28","29","30"],"F:\\haitao\\front_end\\src\\user\\regster.js",["31","32"],"import React, {useState} from 'react';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n} from 'antd';\r\nimport {QuestionCircleOutlined} from '@ant-design/icons';\r\n\r\nconst {Option} = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\nconst residences = [\r\n    {\r\n        value: 'zhejiang',\r\n        label: 'Zhejiang',\r\n        children: [\r\n            {\r\n                value: 'hangzhou',\r\n                label: 'Hangzhou',\r\n                children: [\r\n                    {\r\n                        value: 'xihu',\r\n                        label: 'West Lake',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'jiangsu',\r\n        label: 'Jiangsu',\r\n        children: [\r\n            {\r\n                value: 'nanjing',\r\n                label: 'Nanjing',\r\n                children: [\r\n                    {\r\n                        value: 'zhonghuamen',\r\n                        label: 'Zhong Hua Men',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 8,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 16,\r\n        },\r\n    },\r\n};\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n            offset: 0,\r\n        },\r\n        sm: {\r\n            span: 16,\r\n            offset: 8,\r\n        },\r\n    },\r\n};\r\n\r\nconst RegistrationForm = () => {\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Received values of form: ', values);\r\n    };\r\n\r\n    const prefixSelector = (\r\n        <Form.Item name=\"prefix\" noStyle>\r\n            <Select\r\n                style={{\r\n                    width: 70,\r\n                }}\r\n            >\r\n                <Option value=\"86\">+86</Option>\r\n                <Option value=\"87\">+87</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n    const [autoCompleteResult, setAutoCompleteResult] = useState([]);\r\n\r\n    const onWebsiteChange = (value) => {\r\n        if (!value) {\r\n            setAutoCompleteResult([]);\r\n        } else {\r\n            setAutoCompleteResult(['.com', '.org', '.net'].map((domain) => `${value}${domain}`));\r\n        }\r\n    };\r\n\r\n    const websiteOptions = autoCompleteResult.map((website) => ({\r\n        label: website,\r\n        value: website,\r\n    }));\r\n    return (\r\n        <Form\r\n            {...formItemLayout}\r\n            form={form}\r\n            name=\"register\"\r\n            onFinish={onFinish}\r\n            initialValues={{\r\n                residence: ['zhejiang', 'hangzhou', 'xihu'],\r\n                prefix: '86',\r\n            }}\r\n            scrollToFirstError\r\n        >\r\n            <Form.Item\r\n                name=\"email\"\r\n                label=\"E-mail\"\r\n                rules={[\r\n                    {\r\n                        type: 'email',\r\n                        message: 'The input is not valid E-mail!',\r\n                    },\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your E-mail!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                ]}\r\n                hasFeedback\r\n            >\r\n                <Input.Password/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"confirm\"\r\n                label=\"Confirm Password\"\r\n                dependencies={['password']}\r\n                hasFeedback\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                    },\r\n                    ({getFieldValue}) => ({\r\n                        validator(rule, value) {\r\n                            if (!value || getFieldValue('password') === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n\r\n                            return Promise.reject('The two passwords that you entered do not match!');\r\n                        },\r\n                    }),\r\n                ]}\r\n            >\r\n                <Input.Password/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"nickname\"\r\n                label={\r\n                    <span>\r\n            Nickname&nbsp;\r\n                        <Tooltip title=\"What do you want others to call you?\">\r\n              <QuestionCircleOutlined/>\r\n            </Tooltip>\r\n          </span>\r\n                }\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your nickname!',\r\n                        whitespace: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"residence\"\r\n                label=\"Habitual Residence\"\r\n                rules={[\r\n                    {\r\n                        type: 'array',\r\n                        required: true,\r\n                        message: 'Please select your habitual residence!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Cascader options={residences}/>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"phone\"\r\n                label=\"Phone Number\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your phone number!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input\r\n                    addonBefore={prefixSelector}\r\n                    style={{\r\n                        width: '100%',\r\n                    }}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"website\"\r\n                label=\"Website\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input website!',\r\n                    },\r\n                ]}\r\n            >\r\n                <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder=\"website\">\r\n                    <Input/>\r\n                </AutoComplete>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n                <Row gutter={8}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name=\"captcha\"\r\n                            noStyle\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Please input the captcha you got!',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Button>Get captcha</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"agreement\"\r\n                valuePropName=\"checked\"\r\n                rules={[\r\n                    {\r\n                        validator: (_, value) =>\r\n                            value ? Promise.resolve() : Promise.reject('Should accept agreement'),\r\n                    },\r\n                ]}\r\n                {...tailFormItemLayout}\r\n            >\r\n                <Checkbox>\r\n                    I have read the <a href=\"\">agreement</a>\r\n                </Checkbox>\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Register\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default RegistrationForm",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":8,"nodeType":"39","messageId":"40","endLine":1,"endColumn":12},{"ruleId":"37","severity":1,"message":"41","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":24},{"ruleId":"37","severity":1,"message":"42","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"37","severity":1,"message":"43","line":4,"column":10,"nodeType":"39","messageId":"40","endLine":4,"endColumn":14},{"ruleId":"37","severity":1,"message":"41","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":24},{"ruleId":"37","severity":1,"message":"44","line":16,"column":7,"nodeType":"39","messageId":"40","endLine":16,"endColumn":25},{"ruleId":"45","severity":1,"message":"46","line":284,"column":37,"nodeType":"47","endLine":284,"endColumn":48},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'RegistrationForm' is defined but never used.","'ReactDom' is defined but never used.","'Link' is defined but never used.","'AutoCompleteOption' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]